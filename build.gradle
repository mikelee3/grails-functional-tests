buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "org.grails.plugins:hibernate5:7.0.4"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"
    }
}

version "0.1"
group "grails.functional"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}


sourceSets {
    functionalTest {
        groovy.srcDir "${projectDir}/src/functional-test/groovy"
        resources.srcDir "${projectDir}/src/functional-test/resources"
//        compileClasspath += main.output + test.output
//        runtimeClasspath += main.output + test.output
        compileClasspath += main.output + integrationTest.output
        runtimeClasspath += main.output + integrationTest.output
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
//    functionalTestImplementation.extendsFrom testImplementation
//    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
    functionalTestComile.extendsFrom integrationTestCompile
    functionalTestImplementation.extendsFrom integrationTestImplementation
    functionalTestRuntimeOnly.extendsFrom integrationTestRuntimeOnly
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.2.4"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"

    functionalTestCompile "org.gebish:geb-spock:4.0"
    functionalTestCompile "org.seleniumhq.selenium:selenium-remote-driver:3.141.59"
    functionalTestCompile "org.seleniumhq.selenium:selenium-api:3.141.59"
    functionalTestCompile "org.seleniumhq.selenium:selenium-support:3.141.59"
    functionalTestCompile "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    functionalTestCompile "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

    functionalTestCompile "org.seleniumhq.selenium:htmlunit-driver:2.46.0"
    functionalTestCompile "net.sourceforge.htmlunit:htmlunit:2.46.0"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/functionalTest")
//    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
//    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}


assets {
    minifyJs = true
    minifyCss = true
}

eclipse {
    classpath {
        plusConfigurations.add configurations.functionalTestCompile
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { e ->
                    e.path.contains('grails-app/conf') || e.path.contains('gsp-class')
                }
            }
        }
    }
}
